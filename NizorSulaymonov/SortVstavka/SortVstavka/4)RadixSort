// SortVstavka.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include "stdio.h"
#include "stdlib.h"
#include "time.h"
#include "malloc.h"
#include "math.h"
#define uchar unsigned char
#define ushort unsigned short
#define ufloat unsigned float
int c = 0;		
//Порязрядная сортировка
void RadixSortPass(short Offset, int N, double* sourse, double* dest, long* count)
{
	c++;
	double* sp;
	int s = 0, c, i;
	long* cp = count;
	uchar* bp;

	for (i = 1024; i > 0; --i, ++cp)
	{
		c = *cp;
		*cp = s;
		s += c;
	}

	bp = (uchar*)sourse + Offset;
	sp = sourse;

	for (i = N; i > 0; --i, bp += sizeof(double), ++sp)
	{
		cp = count + *bp;
		dest[*cp] = *sp;
		(*cp)++;
	}
}

long* Create_Count(double* data, int N)
{
	uchar* bp = (uchar*)data;
	uchar* dataEnd = (uchar*)(data + N);

	ushort i;

	long* counters = malloc(1024 * sizeof(double) * sizeof(int));
	for (i = 0; i < 1024 * sizeof(double); i++)
	{
		counters[i] = 0;
	}

	while (bp != dataEnd)
	{
		for (i = 0; i < sizeof(double); i++)
		{
			counters[1024 * i + *(bp++)]++;
		}
	}

	return counters;
}

void RadixSort(double* in, double* out, int N)
{
	int* count;
	ushort i;
	int j;

	int* counters = Create_Count(in, N);

	for (i = 0; i < sizeof(double); i++)
	{
		count = counters + 1024 * i;
		RadixSortPass(i, N, in, out, count);

		for (j = 0; j < N; j++)
		{
			in[j] = out[j];
		}
	}
}

void RadixSortSign(double* in, double* out, int N, double* res)
{
	int i, g = N, kneg, k;
	RadixSort(in, out, N);
	for (i = 0; i < N; i++)
		if (out[i] < 0)
		{
			g = i;
			break;
		}
	kneg = N - g;
	for (i = 0, k = N - 1; i < kneg; i++, k--)
		res[i] = out[k];
	for (i = kneg; i < N; i++)
		res[i] = out[i - kneg];
}

void c_Radix_Sort()
{
	double b1;
	double a[10];
	double b[10];
	double r[10];
	int N = 10;

	printf("Enter the numbers(double) in 10-size massive\n Sorted by <RadixSort> type\n");

	int i = 0;
	for (i; i < N; i++)
	{
		scanf_s("%lf", &b1);
		a[i] = b1;
		b[i] = b1;
	}

	RadixSortSign(&a, &b, N, r);

	printf("\n\n\n");

	i = 0;
	for (i; i < N; i++)
	{
		printf_s("	 %lf\n", r[i]);
	}
	printf_s("\nSort_time =%d\n\n ", c);			//Время сортировки
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
